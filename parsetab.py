
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BREAK CHAR CHAR_LITERAL COMMA COMMENT_MULTI COMMENT_SINGLE CONTINUE DEC DIVIDE ELSE EQ FLOAT FLOAT_LITERAL FOR GT GTE IDENTIFIER IF INC INT INT_LITERAL LBRACE LBRACKET LPAREN LT LTE MINUS MOD NEQ NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING_LITERAL TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration\n                   | function_declarationvar_declaration : type_specifier IDENTIFIER SEMICOLONvar_declaration : type_specifier IDENTIFIER ASSIGN expression SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | CHAR\n                      | VOIDfunction_declaration : type_specifier IDENTIFIER LPAREN param_list RPAREN compound_statementparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDENTIFIERempty :compound_statement : LBRACE statement_list RBRACEstatement_list : statement_list statementstatement_list : statementstatement : expression_statement\n                 | compound_statement\n                 | selection_statement\n                 | iteration_statement\n                 | return_statementexpression_statement : expression SEMICOLONexpression : assignment_expression\n                  | binary_expression\n                  | termassignment_expression : IDENTIFIER ASSIGN expressionbinary_expression : expression PLUS expression\n                         | expression MINUS expression\n                         | expression TIMES expression\n                         | expression DIVIDE expressionterm : IDENTIFIER\n            | INT_LITERAL\n            | LPAREN expression RPARENselection_statement : IF LPAREN expression RPAREN statement\n                           | IF LPAREN expression RPAREN statement ELSE statementiteration_statement : WHILE LPAREN expression RPAREN statement\n                           | FOR LPAREN expression_statement expression_statement expression RPAREN statementreturn_statement : RETURN expression SEMICOLON'
    
_lr_action_items = {'INT':([0,2,3,4,5,11,13,15,28,36,43,58,],[7,7,-3,-4,-5,-2,-6,7,-7,7,-12,-18,]),'FLOAT':([0,2,3,4,5,11,13,15,28,36,43,58,],[8,8,-3,-4,-5,-2,-6,8,-7,8,-12,-18,]),'CHAR':([0,2,3,4,5,11,13,15,28,36,43,58,],[9,9,-3,-4,-5,-2,-6,9,-7,9,-12,-18,]),'VOID':([0,2,3,4,5,11,13,15,28,36,43,58,],[10,10,-3,-4,-5,-2,-6,10,-7,10,-12,-18,]),'$end':([1,2,3,4,5,11,13,28,43,58,],[0,-1,-3,-4,-5,-2,-6,-7,-12,-18,]),'IDENTIFIER':([6,7,8,9,10,14,22,23,27,29,30,31,32,44,46,47,48,49,50,51,52,57,58,59,60,61,62,63,67,68,69,70,71,72,73,75,76,77,78,],[12,-8,-9,-10,-11,16,16,34,16,16,16,16,16,16,16,-20,-21,-22,-23,-24,-25,16,-18,-19,-26,16,16,16,16,-42,16,16,16,-38,-40,16,16,-39,-41,]),'SEMICOLON':([12,16,17,18,19,20,21,37,38,39,40,41,42,53,64,],[13,-35,28,-27,-28,-29,-36,-30,-31,-32,-33,-34,-37,60,68,]),'ASSIGN':([12,16,],[14,27,]),'LPAREN':([12,14,22,27,29,30,31,32,44,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,67,68,69,70,71,72,73,75,76,77,78,],[15,22,22,22,22,22,22,22,22,22,-20,-21,-22,-23,-24,-25,61,62,63,22,-18,-19,-26,22,22,22,22,-42,22,22,22,-38,-40,22,22,-39,-41,]),'INT_LITERAL':([14,22,27,29,30,31,32,44,46,47,48,49,50,51,52,57,58,59,60,61,62,63,67,68,69,70,71,72,73,75,76,77,78,],[21,21,21,21,21,21,21,21,21,-20,-21,-22,-23,-24,-25,21,-18,-19,-26,21,21,21,21,-42,21,21,21,-38,-40,21,21,-39,-41,]),'RPAREN':([15,16,18,19,20,21,24,25,26,33,34,37,38,39,40,41,42,45,65,66,74,],[-17,-35,-27,-28,-29,-36,35,-14,-15,42,-16,-30,-31,-32,-33,-34,-37,-13,69,70,76,]),'COMMA':([15,24,25,26,34,45,],[-17,36,-14,-15,-16,-13,]),'PLUS':([16,17,18,19,20,21,33,37,38,39,40,41,42,53,64,65,66,74,],[-35,29,-27,-28,-29,-36,29,29,29,29,29,29,-37,29,29,29,29,29,]),'MINUS':([16,17,18,19,20,21,33,37,38,39,40,41,42,53,64,65,66,74,],[-35,30,-27,-28,-29,-36,30,30,30,30,30,30,-37,30,30,30,30,30,]),'TIMES':([16,17,18,19,20,21,33,37,38,39,40,41,42,53,64,65,66,74,],[-35,31,-27,-28,-29,-36,31,31,31,31,31,31,-37,31,31,31,31,31,]),'DIVIDE':([16,17,18,19,20,21,33,37,38,39,40,41,42,53,64,65,66,74,],[-35,32,-27,-28,-29,-36,32,32,32,32,32,32,-37,32,32,32,32,32,]),'LBRACE':([35,44,46,47,48,49,50,51,52,58,59,60,68,69,70,72,73,75,76,77,78,],[44,44,44,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,44,44,-38,-40,44,44,-39,-41,]),'IF':([44,46,47,48,49,50,51,52,58,59,60,68,69,70,72,73,75,76,77,78,],[54,54,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,54,54,-38,-40,54,54,-39,-41,]),'WHILE':([44,46,47,48,49,50,51,52,58,59,60,68,69,70,72,73,75,76,77,78,],[55,55,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,55,55,-38,-40,55,55,-39,-41,]),'FOR':([44,46,47,48,49,50,51,52,58,59,60,68,69,70,72,73,75,76,77,78,],[56,56,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,56,56,-38,-40,56,56,-39,-41,]),'RETURN':([44,46,47,48,49,50,51,52,58,59,60,68,69,70,72,73,75,76,77,78,],[57,57,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,57,57,-38,-40,57,57,-39,-41,]),'RBRACE':([46,47,48,49,50,51,52,58,59,60,68,72,73,77,78,],[58,-20,-21,-22,-23,-24,-25,-18,-19,-26,-42,-38,-40,-39,-41,]),'ELSE':([48,49,50,51,52,58,60,68,72,73,77,78,],[-21,-22,-23,-24,-25,-18,-26,-42,75,-40,-39,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,11,]),'var_declaration':([0,2,],[4,4,]),'function_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,15,36,],[6,6,23,23,]),'expression':([14,22,27,29,30,31,32,44,46,57,61,62,63,67,69,70,71,75,76,],[17,33,37,38,39,40,41,53,53,64,65,66,53,53,53,53,74,53,53,]),'assignment_expression':([14,22,27,29,30,31,32,44,46,57,61,62,63,67,69,70,71,75,76,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'binary_expression':([14,22,27,29,30,31,32,44,46,57,61,62,63,67,69,70,71,75,76,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'term':([14,22,27,29,30,31,32,44,46,57,61,62,63,67,69,70,71,75,76,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'param_list':([15,],[24,]),'param':([15,36,],[25,45,]),'empty':([15,],[26,]),'compound_statement':([35,44,46,69,70,75,76,],[43,49,49,49,49,49,49,]),'statement_list':([44,],[46,]),'statement':([44,46,69,70,75,76,],[47,59,72,73,77,78,]),'expression_statement':([44,46,63,67,69,70,75,76,],[48,48,67,71,48,48,48,48,]),'selection_statement':([44,46,69,70,75,76,],[50,50,50,50,50,50,]),'iteration_statement':([44,46,69,70,75,76,],[51,51,51,51,51,51,]),'return_statement':([44,46,69,70,75,76,],[52,52,52,52,52,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','c_parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','c_parser.py',15),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','c_parser.py',19),
  ('declaration -> var_declaration','declaration',1,'p_declaration','c_parser.py',23),
  ('declaration -> function_declaration','declaration',1,'p_declaration','c_parser.py',24),
  ('var_declaration -> type_specifier IDENTIFIER SEMICOLON','var_declaration',3,'p_var_declaration_1','c_parser.py',29),
  ('var_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration_2','c_parser.py',33),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','c_parser.py',37),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','c_parser.py',38),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','c_parser.py',39),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','c_parser.py',40),
  ('function_declaration -> type_specifier IDENTIFIER LPAREN param_list RPAREN compound_statement','function_declaration',6,'p_function_declaration','c_parser.py',45),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','c_parser.py',49),
  ('param_list -> param','param_list',1,'p_param_list_2','c_parser.py',53),
  ('param_list -> empty','param_list',1,'p_param_list_empty','c_parser.py',57),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','c_parser.py',61),
  ('empty -> <empty>','empty',0,'p_empty','c_parser.py',65),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','c_parser.py',69),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','c_parser.py',74),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','c_parser.py',78),
  ('statement -> expression_statement','statement',1,'p_statement','c_parser.py',82),
  ('statement -> compound_statement','statement',1,'p_statement','c_parser.py',83),
  ('statement -> selection_statement','statement',1,'p_statement','c_parser.py',84),
  ('statement -> iteration_statement','statement',1,'p_statement','c_parser.py',85),
  ('statement -> return_statement','statement',1,'p_statement','c_parser.py',86),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','c_parser.py',91),
  ('expression -> assignment_expression','expression',1,'p_expression','c_parser.py',95),
  ('expression -> binary_expression','expression',1,'p_expression','c_parser.py',96),
  ('expression -> term','expression',1,'p_expression','c_parser.py',97),
  ('assignment_expression -> IDENTIFIER ASSIGN expression','assignment_expression',3,'p_assignment_expression','c_parser.py',101),
  ('binary_expression -> expression PLUS expression','binary_expression',3,'p_binary_expression','c_parser.py',105),
  ('binary_expression -> expression MINUS expression','binary_expression',3,'p_binary_expression','c_parser.py',106),
  ('binary_expression -> expression TIMES expression','binary_expression',3,'p_binary_expression','c_parser.py',107),
  ('binary_expression -> expression DIVIDE expression','binary_expression',3,'p_binary_expression','c_parser.py',108),
  ('term -> IDENTIFIER','term',1,'p_term','c_parser.py',112),
  ('term -> INT_LITERAL','term',1,'p_term','c_parser.py',113),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','c_parser.py',114),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','c_parser.py',119),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','c_parser.py',120),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','c_parser.py',127),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement','c_parser.py',128),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','c_parser.py',135),
]
