
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDnonassocEQNEQnonassocLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSNOTAND ASSIGN BREAK CHAR CHAR_LITERAL COMMA COMMENT_MULTI COMMENT_SINGLE CONTINUE DEC DIVIDE ELSE EQ FLOAT FLOAT_LITERAL FOR GT GTE IDENTIFIER IF INC INT INT_LITERAL LBRACE LBRACKET LPAREN LT LTE MINUS MOD NEQ NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING_LITERAL TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration\n                   | function_declarationvar_declaration : type_specifier IDENTIFIER SEMICOLONvar_declaration : type_specifier IDENTIFIER ASSIGN expression SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | CHAR\n                      | VOIDfunction_declaration : type_specifier IDENTIFIER LPAREN param_list RPAREN compound_statementparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDENTIFIERempty :compound_statement : LBRACE statement_list RBRACEstatement_list : statement_list statementstatement_list : statementstatement : expression_statement\n                 | compound_statement\n                 | selection_statement\n                 | iteration_statement\n                 | return_statement\n                 | var_declaration\n                 | emptyexpression_statement : expression SEMICOLONexpression : assignment_expression\n                  | binary_expression\n                  | unary_expression\n                  | termassignment_expression : IDENTIFIER ASSIGN expressionbinary_expression : expression PLUS expression\n                         | expression MINUS expression\n                         | expression TIMES expression\n                         | expression DIVIDE expression\n                         | expression MOD expression\n                         | expression EQ expression\n                         | expression NEQ expression\n                         | expression LT expression\n                         | expression GT expression\n                         | expression LTE expression\n                         | expression GTE expression\n                         | expression AND expression\n                         | expression OR expressionunary_expression : MINUS expression %prec UMINUS\n                        | NOT expression\n                        | INC IDENTIFIER\n                        | DEC IDENTIFIERterm : IDENTIFIER\n            | INT_LITERAL\n            | LPAREN expression RPAREN\n            | function_callfunction_call : IDENTIFIER LPAREN argument_list RPARENargument_list : argument_list COMMA expression\n                     | expression\n                     | emptyselection_statement : IF LPAREN expression RPAREN compound_statement\n                           | IF LPAREN expression RPAREN compound_statement ELSE compound_statementiteration_statement : WHILE LPAREN expression RPAREN statement\n                           | FOR LPAREN expression_statement expression_statement expression RPAREN statementreturn_statement : RETURN expression SEMICOLON'
    
_lr_action_items = {'INT':([0,2,3,4,5,11,13,15,35,56,75,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[7,7,-3,-4,-5,-2,-6,7,-7,7,-12,7,7,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,7,-59,-61,7,-60,-62,]),'FLOAT':([0,2,3,4,5,11,13,15,35,56,75,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[8,8,-3,-4,-5,-2,-6,8,-7,8,-12,8,8,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,8,-59,-61,8,-60,-62,]),'CHAR':([0,2,3,4,5,11,13,15,35,56,75,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[9,9,-3,-4,-5,-2,-6,9,-7,9,-12,9,9,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,9,-59,-61,9,-60,-62,]),'VOID':([0,2,3,4,5,11,13,15,35,56,75,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[10,10,-3,-4,-5,-2,-6,10,-7,10,-12,10,10,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,10,-59,-61,10,-60,-62,]),'$end':([1,2,3,4,5,11,13,35,75,96,],[0,-1,-3,-4,-5,-2,-6,-7,-12,-18,]),'IDENTIFIER':([6,7,8,9,10,13,14,22,23,24,25,27,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,93,94,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[12,-8,-9,-10,-11,-6,16,16,16,51,52,16,54,16,16,-7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-20,-21,-22,-23,-24,-25,-26,-27,16,103,-18,-19,-28,16,16,16,16,-63,16,16,-59,-61,16,-60,-62,]),'SEMICOLON':([12,16,17,18,19,20,21,26,28,49,50,51,52,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,102,103,],[13,-51,35,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-53,-55,98,107,13,]),'ASSIGN':([12,16,103,],[14,33,14,]),'LPAREN':([12,13,14,16,22,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,90,91,92,93,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[15,-6,27,34,27,27,27,27,27,-7,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-20,-21,-22,-23,-24,-25,-26,-27,99,100,101,27,-18,-19,-28,27,27,27,27,-63,27,27,-59,-61,27,-60,-62,]),'RBRACE':([13,35,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[-6,-7,-17,96,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,-17,-59,-61,-17,-60,-62,]),'LBRACE':([13,35,55,76,80,81,82,83,84,85,86,87,88,96,97,98,107,108,109,111,112,114,115,116,117,],[-6,-7,76,76,76,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,76,76,-59,-61,76,76,-60,-62,]),'IF':([13,35,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[-6,-7,90,90,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,90,-59,-61,90,-60,-62,]),'WHILE':([13,35,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[-6,-7,91,91,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,91,-59,-61,91,-60,-62,]),'FOR':([13,35,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[-6,-7,92,92,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,92,-59,-61,92,-60,-62,]),'RETURN':([13,35,76,80,81,82,83,84,85,86,87,88,96,97,98,107,109,111,112,115,116,117,],[-6,-7,93,93,-20,-21,-22,-23,-24,-25,-26,-27,-18,-19,-28,-63,93,-59,-61,93,-60,-62,]),'MINUS':([13,14,16,17,18,19,20,21,22,23,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,79,80,81,82,83,84,85,86,87,88,89,93,95,96,97,98,99,100,101,102,104,105,106,107,109,110,111,112,113,115,116,117,],[-6,22,-51,37,-29,-30,-31,-32,22,22,-52,22,-54,22,22,-7,22,22,22,22,22,22,22,22,22,22,22,22,22,-47,-48,-49,-50,37,37,37,-34,-35,-36,-37,-38,37,37,37,37,37,37,37,37,-53,22,-55,22,22,-20,-21,-22,-23,-24,-25,-26,-27,37,22,37,-18,-19,-28,22,22,22,37,37,37,22,-63,22,22,-59,-61,37,22,-60,-62,]),'NOT':([13,14,22,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,93,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[-6,23,23,23,23,23,23,-7,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-20,-21,-22,-23,-24,-25,-26,-27,23,-18,-19,-28,23,23,23,23,-63,23,23,-59,-61,23,-60,-62,]),'INC':([13,14,22,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,93,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[-6,24,24,24,24,24,24,-7,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-20,-21,-22,-23,-24,-25,-26,-27,24,-18,-19,-28,24,24,24,24,-63,24,24,-59,-61,24,-60,-62,]),'DEC':([13,14,22,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,93,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[-6,25,25,25,25,25,25,-7,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-20,-21,-22,-23,-24,-25,-26,-27,25,-18,-19,-28,25,25,25,25,-63,25,25,-59,-61,25,-60,-62,]),'INT_LITERAL':([13,14,22,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,81,82,83,84,85,86,87,88,93,96,97,98,99,100,101,106,107,109,110,111,112,115,116,117,],[-6,26,26,26,26,26,26,-7,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-20,-21,-22,-23,-24,-25,-26,-27,26,-18,-19,-28,26,26,26,26,-63,26,26,-59,-61,26,-60,-62,]),'RPAREN':([15,16,18,19,20,21,26,28,30,31,32,34,49,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,95,104,105,113,],[-17,-51,-29,-30,-31,-32,-52,-54,55,-14,-15,-17,-47,-48,-49,-50,74,-16,-33,78,-57,-58,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-53,-13,-55,-56,108,109,115,]),'COMMA':([15,16,18,19,20,21,26,28,30,31,32,34,49,50,51,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,95,],[-17,-51,-29,-30,-31,-32,-52,-54,56,-14,-15,-17,-47,-48,-49,-50,-16,-33,79,-57,-58,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-53,-13,-55,-56,]),'PLUS':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,36,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,36,36,36,-34,-35,-36,-37,-38,36,36,36,36,36,36,36,36,-53,-55,36,36,36,36,36,36,]),'TIMES':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,38,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,38,38,38,38,38,-36,-37,-38,38,38,38,38,38,38,38,38,-53,-55,38,38,38,38,38,38,]),'DIVIDE':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,39,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,39,39,39,39,39,-36,-37,-38,39,39,39,39,39,39,39,39,-53,-55,39,39,39,39,39,39,]),'MOD':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,40,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,40,40,40,40,40,-36,-37,-38,40,40,40,40,40,40,40,40,-53,-55,40,40,40,40,40,40,]),'EQ':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,41,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,41,41,41,-34,-35,-36,-37,-38,None,None,-41,-42,-43,-44,41,41,-53,-55,41,41,41,41,41,41,]),'NEQ':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,42,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,42,42,42,-34,-35,-36,-37,-38,None,None,-41,-42,-43,-44,42,42,-53,-55,42,42,42,42,42,42,]),'LT':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,43,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,43,43,43,-34,-35,-36,-37,-38,43,43,None,None,None,None,43,43,-53,-55,43,43,43,43,43,43,]),'GT':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,44,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,44,44,44,-34,-35,-36,-37,-38,44,44,None,None,None,None,44,44,-53,-55,44,44,44,44,44,44,]),'LTE':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,45,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,45,45,45,-34,-35,-36,-37,-38,45,45,None,None,None,None,45,45,-53,-55,45,45,45,45,45,45,]),'GTE':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,46,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,46,46,46,-34,-35,-36,-37,-38,46,46,None,None,None,None,46,46,-53,-55,46,46,46,46,46,46,]),'AND':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,47,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,47,47,47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,47,-53,-55,47,47,47,47,47,47,]),'OR':([16,17,18,19,20,21,26,28,49,50,51,52,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,89,95,102,104,105,113,],[-51,48,-29,-30,-31,-32,-52,-54,-47,-48,-49,-50,48,48,48,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-53,-55,48,48,48,48,48,48,]),'ELSE':([96,111,],[-18,114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,11,]),'var_declaration':([0,2,76,80,109,115,],[4,4,87,87,87,87,]),'function_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,15,56,76,80,109,115,],[6,6,29,29,94,94,94,94,]),'expression':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[17,49,50,53,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,89,95,89,102,104,105,89,89,89,113,89,]),'assignment_expression':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'binary_expression':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'unary_expression':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'term':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'function_call':([14,22,23,27,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,76,79,80,93,99,100,101,106,109,110,115,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'param_list':([15,],[30,]),'param':([15,56,],[31,77,]),'empty':([15,34,76,80,109,115,],[32,60,88,88,88,88,]),'argument_list':([34,],[58,]),'compound_statement':([55,76,80,108,109,114,115,],[75,83,83,111,83,116,83,]),'statement_list':([76,],[80,]),'statement':([76,80,109,115,],[81,97,112,117,]),'expression_statement':([76,80,101,106,109,115,],[82,82,106,110,82,82,]),'selection_statement':([76,80,109,115,],[84,84,84,84,]),'iteration_statement':([76,80,109,115,],[85,85,85,85,]),'return_statement':([76,80,109,115,],[86,86,86,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','c_parser.py',20),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','c_parser.py',25),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','c_parser.py',29),
  ('declaration -> var_declaration','declaration',1,'p_declaration','c_parser.py',33),
  ('declaration -> function_declaration','declaration',1,'p_declaration','c_parser.py',34),
  ('var_declaration -> type_specifier IDENTIFIER SEMICOLON','var_declaration',3,'p_var_declaration_1','c_parser.py',39),
  ('var_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration_2','c_parser.py',43),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','c_parser.py',47),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','c_parser.py',48),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','c_parser.py',49),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','c_parser.py',50),
  ('function_declaration -> type_specifier IDENTIFIER LPAREN param_list RPAREN compound_statement','function_declaration',6,'p_function_declaration','c_parser.py',55),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','c_parser.py',59),
  ('param_list -> param','param_list',1,'p_param_list_2','c_parser.py',63),
  ('param_list -> empty','param_list',1,'p_param_list_empty','c_parser.py',67),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','c_parser.py',71),
  ('empty -> <empty>','empty',0,'p_empty','c_parser.py',75),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','c_parser.py',79),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','c_parser.py',84),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','c_parser.py',88),
  ('statement -> expression_statement','statement',1,'p_statement','c_parser.py',92),
  ('statement -> compound_statement','statement',1,'p_statement','c_parser.py',93),
  ('statement -> selection_statement','statement',1,'p_statement','c_parser.py',94),
  ('statement -> iteration_statement','statement',1,'p_statement','c_parser.py',95),
  ('statement -> return_statement','statement',1,'p_statement','c_parser.py',96),
  ('statement -> var_declaration','statement',1,'p_statement','c_parser.py',97),
  ('statement -> empty','statement',1,'p_statement','c_parser.py',98),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','c_parser.py',103),
  ('expression -> assignment_expression','expression',1,'p_expression','c_parser.py',107),
  ('expression -> binary_expression','expression',1,'p_expression','c_parser.py',108),
  ('expression -> unary_expression','expression',1,'p_expression','c_parser.py',109),
  ('expression -> term','expression',1,'p_expression','c_parser.py',110),
  ('assignment_expression -> IDENTIFIER ASSIGN expression','assignment_expression',3,'p_assignment_expression','c_parser.py',114),
  ('binary_expression -> expression PLUS expression','binary_expression',3,'p_binary_expression','c_parser.py',118),
  ('binary_expression -> expression MINUS expression','binary_expression',3,'p_binary_expression','c_parser.py',119),
  ('binary_expression -> expression TIMES expression','binary_expression',3,'p_binary_expression','c_parser.py',120),
  ('binary_expression -> expression DIVIDE expression','binary_expression',3,'p_binary_expression','c_parser.py',121),
  ('binary_expression -> expression MOD expression','binary_expression',3,'p_binary_expression','c_parser.py',122),
  ('binary_expression -> expression EQ expression','binary_expression',3,'p_binary_expression','c_parser.py',123),
  ('binary_expression -> expression NEQ expression','binary_expression',3,'p_binary_expression','c_parser.py',124),
  ('binary_expression -> expression LT expression','binary_expression',3,'p_binary_expression','c_parser.py',125),
  ('binary_expression -> expression GT expression','binary_expression',3,'p_binary_expression','c_parser.py',126),
  ('binary_expression -> expression LTE expression','binary_expression',3,'p_binary_expression','c_parser.py',127),
  ('binary_expression -> expression GTE expression','binary_expression',3,'p_binary_expression','c_parser.py',128),
  ('binary_expression -> expression AND expression','binary_expression',3,'p_binary_expression','c_parser.py',129),
  ('binary_expression -> expression OR expression','binary_expression',3,'p_binary_expression','c_parser.py',130),
  ('unary_expression -> MINUS expression','unary_expression',2,'p_unary_expression','c_parser.py',134),
  ('unary_expression -> NOT expression','unary_expression',2,'p_unary_expression','c_parser.py',135),
  ('unary_expression -> INC IDENTIFIER','unary_expression',2,'p_unary_expression','c_parser.py',136),
  ('unary_expression -> DEC IDENTIFIER','unary_expression',2,'p_unary_expression','c_parser.py',137),
  ('term -> IDENTIFIER','term',1,'p_term','c_parser.py',141),
  ('term -> INT_LITERAL','term',1,'p_term','c_parser.py',142),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','c_parser.py',143),
  ('term -> function_call','term',1,'p_term','c_parser.py',144),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','c_parser.py',148),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','c_parser.py',152),
  ('argument_list -> expression','argument_list',1,'p_argument_list','c_parser.py',153),
  ('argument_list -> empty','argument_list',1,'p_argument_list','c_parser.py',154),
  ('selection_statement -> IF LPAREN expression RPAREN compound_statement','selection_statement',5,'p_selection_statement','c_parser.py',164),
  ('selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','selection_statement',7,'p_selection_statement','c_parser.py',165),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','c_parser.py',172),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement','c_parser.py',173),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','c_parser.py',180),
]
